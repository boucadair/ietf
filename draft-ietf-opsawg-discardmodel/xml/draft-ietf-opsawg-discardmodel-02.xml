<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.31 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-ietf-opsawg-discardmodel-02" category="info" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Info. Model for Pkt Discard Reporting">An Information Model for Packet Discard Reporting</title>

    <author initials="J." surname="Evans" fullname="John Evans">
      <organization>Amazon</organization>
      <address>
        <postal>
          <street>1 Principal Place, Worship Street</street>
          <city>London</city>
          <code>EC2A 2FA</code>
          <country>UK</country>
        </postal>
        <email>jevanamz@amazon.co.uk</email>
      </address>
    </author>
    <author initials="O." surname="Pylypenko" fullname="Oleksandr Pylypenko">
      <organization>Amazon</organization>
      <address>
        <postal>
          <street>410 Terry Ave N</street>
          <city>Seattle</city>
          <region>WA</region>
          <code>98109</code>
          <country>US</country>
        </postal>
        <email>opyl@amazon.com</email>
      </address>
    </author>
    <author initials="J." surname="Haas" fullname="Jeffrey Haas">
      <organization>Juniper Networks</organization>
      <address>
        <postal>
          <street>1133 Innovation Way</street>
          <city>Sunnyvale</city>
          <region>CA</region>
          <code>94089</code>
          <country>US</country>
        </postal>
        <email>jhaas@juniper.net</email>
      </address>
    </author>
    <author initials="A." surname="Kadosh" fullname="Aviran Kadosh">
      <organization>Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>170 West Tasman Dr.</street>
          <city>San Jose</city>
          <region>CA</region>
          <code>95134</code>
          <country>US</country>
        </postal>
        <email>akadosh@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Boucadair" fullname="Mohamed Boucadair">
      <organization>Orange</organization>
      <address>
        <postal>
          <country>France</country>
        </postal>
        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <date year="2024" month="July" day="04"/>

    <area>Operations and Management Area</area>
    <workgroup>OPSAWG</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The primary function of a network is to transport packets and deliver them according to a service level objective.  Understanding both where and why packet loss occurs within a network is essential for effective network operation.  Device-reported packet loss is the most direct signal for network operations to identify customer impact resulting from unintended packet loss.  This document defines an information model for packet loss reporting, which classifies these signals to enable automated network mitigation of unintended packet loss.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>In automating network operations, a network operator needs to be able to detect anomalous packet loss, diagnose or root cause the loss, and then apply one of a set of possible actions to mitigate customer-impacting packet loss.  Some packet loss is normal or intended in IP networks, however.  Hence, precise classification of packet loss signals is crucial both to ensure that anomalous packet loss is easily detected and that the right action or sequence of actions are taken to mitigate the impact, as taking the wrong action can make problems worse.</t>

<t>The existing metrics for reporting packet loss, as defined in <xref target="RFC1213"/> - namely ifInDiscards, ifOutDiscards, ifInErrors, ifOutErrors - do not provide sufficient precision to automatically identify the cause of the loss and mitigate the impact.  From a network operator's perspective, ifInDiscards can represent both intended packet loss (e.g., packets discarded due to policy) and unintended packet loss (e.g., packets dropped in error). Furthermore, these definitions are ambiguous, as vendors can and have implemented them differently.  In some implementations, ifInErrors accounts only for errored packets that are dropped, while in others, it accounts for all errored packets, whether they are dropped or not.  Many implementations support more discard metrics than these; where they do, they have been inconsistently implemented due to the lack of a standardised classification scheme and clear semantics for packet loss reporting.  <xref target="RFC7270"/> provides support for reporting discards per flow in IPFIX using forwardingStatus, however, the defined drop reason codes also lack sufficient clarity to support automated root cause analysis and mitigation of impact.</t>

<t>Hence, this document defines an information model for packet loss reporting, aiming to address these issues by presenting a packet loss classification scheme that can enable automated mitigation of unintended packet loss.  Consistent with <xref target="RFC3444"/>, this information model is independent of any specific implementations or protocols used to transport the data.  There are multiple ways that this information model could be implemented (i.e., data models), including SNMP <xref target="RFC1157"/>, NETCONF <xref target="RFC6241"/> / YANG <xref target="RFC7950"/>, and IPFIX <xref target="RFC5153"/>, but they are outside of the scope of this document.  We further limit the scope of this document to reporting packet loss at layer 3 and frames discarded at layer 2, although the information model could be extended in future to cover segments dropped at layer 4.</t>

<t>Section 3 describes the problem. Section 4 describes the information model and requirements with examples.  Section 5 provides examples of discard signal-to-cause-to-auto-mitigation action mapping.  Section 6 presents the information model as an abstract data structure in YANG, in accordance with <xref target="RFC8791"/>.  Appendix A provides an example of where packets may be discarded in a device.  Appendix B details the authors' experience from implementing this model.</t>

<t>This document considers only the signals that may trigger automated mitigation plans and not how they are defined or executed.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>A packet discard is considered to be any packet dropped by a device, which may be intentional (i.e. due to a configured policy, e.g. such as an Access Control List (ACL)) or unintentional (i.e. packets dropped in error).</t>

</section>
<section anchor="problem"><name>Problem Statement</name>
<t>At the highest-level, unintended packet loss is the discarding of packets that the network operator otherwise intends to deliver, i.e. which indicates an error state.  There are many possible reasons for unintended packet loss, including: erroring links may corrupt packets in transit; incorrect routing tables may result in packets being dropped because they do not match a valid route; configuration errors may result in a valid packet incorrectly matching an access control list (ACL) and being dropped.  Whilst the specific definition of unintended packet loss is network dependent, for any network there are a small set of potential actions that can be taken to minimise customer impact by auto-mitigating unintended packet loss:</t>

<t><list style="numbers">
  <t>Take a device, link, or set of devices and/or links out of service.</t>
  <t>Return a device, link, or set of devices and/or links back into service.</t>
  <t>Move traffic to other links or devices.</t>
  <t>Roll back a recent change to a device that might have caused the problem.</t>
  <t>Escalate to a human (e.g., network operator) as a last resort.</t>
</list></t>

<t>A precise signal of impact is crucial, as taking the wrong action can be worse than taking no action. For example, taking a congested device out of service can make congestion worse by moving the traffic to other links or devices, which are already congested.</t>

<t>To detect whether device-reported discards indicate a problem and to determine what actions should be taken to mitigate the impact and remediate the cause, depends on four primary features of the packet loss signal:</t>

<t><list style="numbers">
  <t>The cause of the loss.</t>
  <t>The rate and/or degree of the loss.</t>
  <t>The duration of the loss.</t>
  <t>The location of the loss.</t>
</list></t>

<t>Features 2, 3, and 4 are already addressed with passive monitoring statistics, for example, obtained with SNMP <xref target="RFC1157"/> / MIB-II <xref target="RFC1213"/> or NETCONF <xref target="RFC6241"/> / YANG <xref target="RFC7950"/>. Feature 1, however, is dependent on the classification scheme used for packet loss reporting. In the next section, we define a new classification scheme to address this problem.</t>

</section>
<section anchor="model"><name>Information Model</name>

<t>The classification scheme is defined as a tree, which follows the structure component/direction/type/layer/sub-type/sub-sub-type/.../metric, where:<br />
a. component can be interface|device|control_plane|flow<br />
b. direction can be ingress|egress<br />
c. type can be traffic|discards, where traffic accounts for packets successfully received or transmitted, and discards accounts for packet drops<br />
d. layer can be l2|l3</t>

<figure><artwork><![CDATA[
module: ietf-packet-discard-reporting
  +--rw packet-discard-reporting
     +--rw interface* [name]
        +--rw name             string
        +--rw ingress
        |  +--rw traffic
        |  |  +--rw l2
        |  |  |  +--rw frames?   uint64
        |  |  |  +--rw bytes?    uint64
        |  |  +--rw l3
        |  |  |  +--rw v4
        |  |  |  |  +--rw packets?     uint64
        |  |  |  |  +--rw bytes?       uint64
        |  |  |  |  +--rw unicast
        |  |  |  |  |  +--rw packets?   uint64
        |  |  |  |  |  +--rw bytes?     uint64
        |  |  |  |  +--rw multicast
        |  |  |  |     +--rw packets?   uint64
        |  |  |  |     +--rw bytes?     uint64
        |  |  |  +--rw v6
        |  |  |     +--rw packets?     uint64
        |  |  |     +--rw bytes?       uint64
        |  |  |     +--rw unicast
        |  |  |     |  +--rw packets?   uint64
        |  |  |     |  +--rw bytes?     uint64
        |  |  |     +--rw multicast
        |  |  |        +--rw packets?   uint64
        |  |  |        +--rw bytes?     uint64
        |  |  +--rw qos
        |  |     +--rw class* [id]
        |  |        +--rw id         string
        |  |        +--rw packets?   uint64
        |  |        +--rw bytes?     uint64
        |  +--rw discards
        |     +--rw l2
        |     |  +--rw frames?   uint64
        |     |  +--rw bytes?    uint64
        |     +--rw l3
        |     |  +--rw v4
        |     |  |  +--rw packets?     uint64
        |     |  |  +--rw bytes?       uint64
        |     |  |  +--rw unicast
        |     |  |  |  +--rw packets?   uint64
        |     |  |  |  +--rw bytes?     uint64
        |     |  |  +--rw multicast
        |     |  |     +--rw packets?   uint64
        |     |  |     +--rw bytes?     uint64
        |     |  +--rw v6
        |     |     +--rw packets?     uint64
        |     |     +--rw bytes?       uint64
        |     |     +--rw unicast
        |     |     |  +--rw packets?   uint64
        |     |     |  +--rw bytes?     uint64
        |     |     +--rw multicast
        |     |        +--rw packets?   uint64
        |     |        +--rw bytes?     uint64
        |     +--rw errors
        |     |  +--rw l2
        |     |  |  +--rw rx
        |     |  |     +--rw frames?          uint48
        |     |  |     +--rw crc-error?       uint48
        |     |  |     +--rw invalid-mac?     uint48
        |     |  |     +--rw invalid-vlan?    uint48
        |     |  |     +--rw invalid-frame?   uint48
        |     |  +--rw l3
        |     |  |  +--rw rx
        |     |  |  |  +--rw packets?          uint48
        |     |  |  |  +--rw checksum-error?   uint48
        |     |  |  |  +--rw mtu-exceeded?     uint48
        |     |  |  |  +--rw invalid-packet?   uint48
        |     |  |  |  +--rw ttl-expired?      uint48
        |     |  |  +--rw no-route?        uint48
        |     |  |  +--rw invalid-sid?     uint48
        |     |  |  +--rw invalid-label?   uint48
        |     |  +--rw hardware
        |     |     +--rw packets?        uint48
        |     |     +--rw parity-error?   uint48
        |     +--rw policy
        |     |  +--rw l2
        |     |  |  +--rw frames?   uint48
        |     |  |  +--rw acl?      uint48
        |     |  +--rw l3
        |     |     +--rw packets?      uint48
        |     |     +--rw acl?          uint48
        |     |     +--rw policer
        |     |     |  +--rw packets?   uint48
        |     |     |  +--rw bytes?     uint48
        |     |     +--rw null-route?   uint48
        |     |     +--rw rpf?          uint48
        |     |     +--rw ddos?         uint48
        |     +--rw no-buffer
        |        +--rw class* [id]
        |           +--rw id         string
        |           +--rw packets?   uint64
        |           +--rw bytes?     uint64
        +--rw egress
        |  +--rw traffic
        |  |  +--rw l2
        |  |  |  +--rw frames?   uint64
        |  |  |  +--rw bytes?    uint64
        |  |  +--rw l3
        |  |  |  +--rw v4
        |  |  |  |  +--rw packets?     uint64
        |  |  |  |  +--rw bytes?       uint64
        |  |  |  |  +--rw unicast
        |  |  |  |  |  +--rw packets?   uint64
        |  |  |  |  |  +--rw bytes?     uint64
        |  |  |  |  +--rw multicast
        |  |  |  |     +--rw packets?   uint64
        |  |  |  |     +--rw bytes?     uint64
        |  |  |  +--rw v6
        |  |  |     +--rw packets?     uint64
        |  |  |     +--rw bytes?       uint64
        |  |  |     +--rw unicast
        |  |  |     |  +--rw packets?   uint64
        |  |  |     |  +--rw bytes?     uint64
        |  |  |     +--rw multicast
        |  |  |        +--rw packets?   uint64
        |  |  |        +--rw bytes?     uint64
        |  |  +--rw qos
        |  |     +--rw class* [id]
        |  |        +--rw id         string
        |  |        +--rw packets?   uint64
        |  |        +--rw bytes?     uint64
        |  +--rw discards
        |     +--rw l2
        |     |  +--rw frames?   uint64
        |     |  +--rw bytes?    uint64
        |     +--rw l3
        |     |  +--rw v4
        |     |  |  +--rw packets?     uint64
        |     |  |  +--rw bytes?       uint64
        |     |  |  +--rw unicast
        |     |  |  |  +--rw packets?   uint64
        |     |  |  |  +--rw bytes?     uint64
        |     |  |  +--rw multicast
        |     |  |     +--rw packets?   uint64
        |     |  |     +--rw bytes?     uint64
        |     |  +--rw v6
        |     |     +--rw packets?     uint64
        |     |     +--rw bytes?       uint64
        |     |     +--rw unicast
        |     |     |  +--rw packets?   uint64
        |     |     |  +--rw bytes?     uint64
        |     |     +--rw multicast
        |     |        +--rw packets?   uint64
        |     |        +--rw bytes?     uint64
        |     +--rw errors
        |     |  +--rw l2
        |     |  |  +--rw tx
        |     |  |     +--rw frames?   uint48
        |     |  +--rw l3
        |     |     +--rw tx
        |     |        +--rw packets?   uint48
        |     +--rw policy
        |     |  +--rw l3
        |     |     +--rw acl?       uint48
        |     |     +--rw policer
        |     |        +--rw packets?   uint48
        |     |        +--rw bytes?     uint48
        |     +--rw no-buffer
        |        +--rw class* [id]
        |           +--rw id         string
        |           +--rw packets?   uint64
        |           +--rw bytes?     uint64
        +--rw control-plane
           +--rw ingress
              +--rw traffic
              |  +--rw packets?   uint48
              |  +--rw bytes?     uint48
              +--rw discards
                 +--rw packets?   uint48
                 +--rw bytes?     uint48
                 +--rw policy
                    +--rw packets?   uint48

]]></artwork></figure>

<t>For additional context, Appendix A provides an example of where packets may be discarded in a device.</t>

<section anchor="requirements"><name>Requirements</name>
<t>Requirements 1-10 relate to packets forwarded by the device; requirement 11 relates to packets destined to or from the device:</t>

<t><list style="numbers">
  <t>All instances of frame or packet receipt, transmission, and discards <bcp14>MUST</bcp14> be reported.</t>
  <t>All instances of frame or packet receipt, transmission, and discards <bcp14>SHOULD</bcp14> be attributed to the physical or logical interface of the device where they occur.</t>
  <t>An individual frame <bcp14>MUST</bcp14> only be accounted for by either the L2 traffic class or the L2 discard classes within a single direction, i.e., ingress or egress.</t>
  <t>An individual packet <bcp14>MUST</bcp14> only be accounted for by either the L3 traffic class or the L3 discard classes within a single direction, i.e., ingress or egress.</t>
  <t>A frame accounted for at L2 <bcp14>SHOULD NOT</bcp14> be accounted for at L3 and vice versa.  An implementation <bcp14>MUST</bcp14> expose which layers a discard is counted against.</t>
  <t>The aggregate L2 and L3 traffic and discard classes <bcp14>SHOULD</bcp14> account for all underlying packets received, transmitted, and discarded across all other classes.</t>
  <t>The aggregate Quality of Service (QoS) traffic and no buffer discard classes <bcp14>MUST</bcp14> account for all underlying packets received, transmitted, and discarded across all other classes.</t>
  <t>In addition to the L2 and L3 aggregate classes, an individual discarded packet <bcp14>MUST</bcp14> only account against a single error, policy, or no_buffer discard subclass.</t>
  <t>When there are multiple reasons for discarding a packet, the ordering of discard class reporting <bcp14>MUST</bcp14> be defined.</t>
  <t>If Diffserv <xref target="RFC2475"/> is not used, no_buffer discards <bcp14>SHOULD</bcp14> be reported as class0.</t>
  <t>Traffic to the device control plane has its own class, however, traffic from the device control plane <bcp14>SHOULD</bcp14> be accounted for in the same way as other egress traffic.</t>
</list></t>

</section>
<section anchor="examples"><name>Examples</name>

<t>Assuming all the requirements are met, a "good" unicast IPv4 packet received would increment:<br />
- interface/ingress/traffic/l3/v4/unicast/packets<br />
- interface/ingress/traffic/l3/v4/unicast/bytes<br />
- interface/ingress/traffic/qos/class_0/packets<br />
- interface/ingress/traffic/qos/class_0/bytes</t>

<t>A received unicast IPv6 packet discarded due to Hop Limit expiry would increment:<br />
- interface/ingress/discards/l3/v6/unicast/packets<br />
- interface/ingress/discards/l3/v6/unicast/bytes<br />
- interface/ingress/discards/l3/rx/ttl_expired/packets</t>

<t>An IPv4 packet discarded on egress due to no buffers would increment:<br />
- interface/egress/discards/l3/v4/unicast/packets<br />
- interface/egress/discards/l3/v4/unicast/bytes<br />
- interface/egress/discards/no_buffer/class_0/packets<br />
- interface/egress/discards/no_buffer/class_0/bytes</t>

</section>
</section>
<section anchor="mapping"><name>Example Signal-Cause-Mitigation Mapping</name>
<t><xref target="ex-table"/> gives an example discard signal-to-cause-to-mitigation action mapping.  Mappings for a specific network will be dependent on the definition of unintended packet loss for that network.</t>

<figure title="Example Signal-Cause-Mitigation Mapping" anchor="ex-table"><artwork><![CDATA[
+-------------------------------------------+---------------------+------------+----------+-------------+-----------------------+
| Discard class                             | Cause               | Discard    | Discard  | Unintended? | Possible actions      |
|                                           |                     | rate       | duration |             |                       |
+-------------------------------------------+---------------------+------------+----------+-------------+-----------------------+
| ingress/discards/errors/l2/rx             | Upstream device     | >Baseline  | O(1min)  | Y           | Take upstream link or |
|                                           | or link errror      |            |          |             | device out-of-service |
| ingress/discards/errors/l3/rx/ttl_expired | Tracert             | <=Baseline |          | N           | no action             |
| ingress/discards/errors/l3/rx/ttl_expired | Convergence         | >Baseline  | O(1s)    | Y           | no action             |
| ingress/discards/errors/l3/rx/ttl_expired | Routing loop        | >Baseline  | O(1min)  | Y           | Roll-back change      |
| .*/policy/.*                              | Policy              |            |          | N           | no action             |
| ingress/discards/errors/l3/no_route       | Convergence         | >Baseline  | O(1s)    | Y           | no action             |
| ingress/discards/errors/l3/no_route       | Config error        | >Baseline  | O(1min)  | Y           | Roll-back change      |
| ingress/discards/errors/l3/no_route       | Invalid destination | >Baseline  | O(10min) | N           | Escalate to operator  |
| ingress/discards/errors/local             | Device errors       | >Baseline  | O(1min)  | Y           | Take device           |
|                                           |                     |            |          |             | out-of-service        |
| egress/discards/no_buffer                 | Congestion          | <=Baseline |          | N           | no action             |
| egress/discards/no_buffer                 | Congestion          | >Baseline  | O(1min)  | Y           | Bring capacity back   |
|                                           |                     |            |          |             | into service or move  |
|                                           |                     |            |          |             | traffic               |
+-------------------------------------------+---------------------+------------+----------+-------------+-----------------------+

]]></artwork></figure>

<t>The 'Baseline' in the 'Discard Rate' column is network dependent.</t>

</section>
<section anchor="module"><name>Yang Module</name>

<figure><artwork><![CDATA[
module ietf-packet-discard-reporting {
  yang-version 1.1;
  namespace
    "urn:ietf:params:xml:ns:yang:ietf-packet-discard-reporting";
  prefix plr;

  import ietf-yang-structure-ext {
    prefix sx;
    reference
      "RFC 8791: YANG Data Structure Extensions";
  }

  organization
    "IETF OPSAWG (Operations and Management Area Working Group)";
  contact
    "WG Web:   https://datatracker.ietf.org/wg/opsawg/
     WG List:  mailto:opsawg@ietf.org

     Author:   John Evans
               <mailto:jevanamz@amazon.co.uk>

     Author:   Oleksandr Pylypenko
               <mailto:opyl@amazon.com>

     Author:   Jeffrey Haas
               <mailto:jhaas@juniper.net>

     Author:   Aviran Kadosh
               <mailto:akadosh@cisco.com>

     Author:   Mohamed Boucadair
                  <mailto:mohamed.boucadair@orange.com>";

  description
    "This module defines an information model for packet discard reporting.";

  revision 2024-06-04 {
    description
      "Initial revision.";
    reference
      "draft-ietf-opsawg-discardmodel: An Information Model for Packet Discard Reporting";
  }

  typedef uint48-or-64 {
    description 
      "Union type representing either a 48-bit or 64-bit unsigned integer. 48-bit counters are used for packet and discard counters that increase at a lower rate, while 64-bit counters are used for traffic byte counters that may increase more rapidly."; 
    type union {
      type uint48; type uint64;
    }
  }

  typedef uint48 {
    type uint64 {
      range "0..281474976710655";
    }
  }


  /*
   * Groupings
   */

  grouping ip {
    description
      "IP traffic counters";
    leaf packets {
      type uint64;
      description
        "Number of IPv4 packets";
    }
    leaf bytes {
      type uint64;
      description
        "Number of IPv4 bytes";
    }
    container unicast {
      description
        "IPv4 unicast ingress traffic counters";
      leaf packets {
        type uint64;
        description
          "Number of IPv4 unicast packets";
      }
      leaf bytes {
        type uint64;
        description
          "Number of IPv4 unicast bytes";
      }
    }
    container multicast {
      description
        "IPv4 multicast ingress traffic counters";
      leaf packets {
        type uint64;
        description
          "Number of IPv4 multicast packets";
      }
      leaf bytes {
        type uint64;
        description
          "Number of IPv4 multicast bytes";
      }
    }
  }

  grouping interface {
    description
      "Interface-level packet loss counters";
    container ingress {
      description
        "Ingress counters";
      container traffic {
        description
          "Ingress traffic counters";
        container l2 {
          description
            "Layer 2 ingress traffic counters";
          leaf frames {
            type uint64;
            description
              "Number of L2 frames";
          }
          leaf bytes {
            type uint64;
            description
              "Number of L2 bytes";
          }
        }
        container l3 {
          description
            "Layer 3 ingress traffic counters";
          container v4 {
            description
              "IPv4 ingress traffic counters";
            uses ip;
          }
          container v6 {
            description
              "IPv6 ingress traffic counters";
            uses ip;
          }
        }
        container qos {
          description
            "Quality of Service (QoS) ingress traffic counters";
          list class {
            key "id";
            min-elements 1;
            description
              "QoS class ingress traffic counters";
            leaf id {
              type string;
              description
                "QoS class identifier";
            }
            leaf packets {
              type uint64;
              description
                "Number of packets in the QoS class";
            }
            leaf bytes {
              type uint64;
              description
                "Number of bytes in the QoS class";
            }
          }
        }
      }
      container discards {
        description
          "Ingress packet discard counters";
        container l2 {
          description
            "Layer 2 ingress packet discard counters";
          leaf frames {
            type uint64;
            description
              "Number of discarded L2 frames";
          }
          leaf bytes {
            type uint64;
            description
              "Number of discarded L2 bytes";
          }
        }
        container l3 {
          description
            "Layer 3 ingress packet discard counters";
          container v4 {
            description
              "IPv4 ingress packet discard counters";
            uses ip;
          }
          container v6 {
            description
              "IPv6 ingress packet discard counters";
            uses ip;
          }
        }
        container errors {
          description
            "Ingress packet error counters";
          container l2 {
            description
              "Layer 2 ingress packet error counters";
            container rx {
              description
                "Layer 2 ingress packet receive error counters";
              leaf frames {
                type uint48;
                description
                  "Number of errored L2 frames";
              }
              leaf crc-error {
                type uint48;
                description
                  "Number of frames received with CRC error";
              }
              leaf invalid-mac {
                type uint48;
                description
                  "Number of frames received with invalid MAC address";
              }
              leaf invalid-vlan {
                type uint48;
                description
                  "Number of frames received with invalid VLAN tag";
              }
              leaf invalid-frame {
                type uint48;
                description
                  "Number of invalid frames received";
              }
            }
          }
          container l3 {
            description
              "Layer 3 ingress packet error counters";
            container rx {
              description
                "Layer 3 ingress packet receive error counters";
              leaf packets {
                type uint48;
                description
                  "Number of errored L3 packets";
              }
              leaf checksum-error {
                type uint48;
                description
                  "Number of packets received with checksum error";
              }
              leaf mtu-exceeded {
                type uint48;
                description
                  "Number of packets received exceeding MTU";
              }
              leaf invalid-packet {
                type uint48;
                description
                  "Number of invalid packets received";
              }
              leaf ttl-expired {
                type uint48;
                description
                  "Number of packets received with expired TTL";
              }
            }
            leaf no-route {
              type uint48;
              description
                "Number of packets with no route";
            }
            leaf invalid-sid {
              type uint48;
              description
                "Number of packets with invalid SID";
            }
            leaf invalid-label {
              type uint48;
              description
                "Number of packets with invalid label";
            }
          }
          container hardware {
            description
              "Hardware error counters";
            leaf packets {
              type uint48;
              description
                "Number of local errored packets";
            }
            leaf parity-error {
              type uint48;
              description
                "Number of packets with parity error";
            }
          }
        }
        container policy {
          description
            "Policy-related ingress packet discard counters";
          container l2 {
            description
              "Layer 2 policy ingress packet discard counters";
            leaf frames {
              type uint48;
              description
                "Number of L2 frames discarded due to policy";
            }
            leaf acl {
              type uint48;
              description
                "Number of frames discarded due to L2 ACL";
            }
          }
          container l3 {
            description
              "Layer 3 policy ingress packet discard counters";
            leaf packets {
              type uint48;
              description
                "Number of L3 packets discarded due to policy";
            }
            leaf acl {
              type uint48;
              description
                "Number of packets discarded due to L3 ACL";
            }
            container policer {
              description
                "Policer ingress packet discard counters";
              leaf packets {
                type uint48;
                description
                  "Number of packets discarded by the policer";
              }
              leaf bytes {
                type uint48;
                description
                  "Number of bytes discarded by the policer";
              }
            }
            leaf null-route {
              type uint48;
              description
                "Number of packets discarded due to null route";
            }
            leaf rpf {
              type uint48;
              description
                "Number of packets discarded due to RPF check failure";
            }
            leaf ddos {
              type uint48;
              description
                "Number of packets discarded due to DDoS protection";
            }
          }
        }
        container no-buffer {
          description
            "Ingress packet discard counters due to buffer unavailability";
          list class {
            key "id";
            min-elements 1;
            description
              "Per-QoS class ingress packet discard counters due to buffer unavailability";
            leaf id {
              type string;
              description
                "QoS class identifier";
            }
            leaf packets {
              type uint64;
              description
                "Number of packets discarded due to buffer unavailability";
            }
            leaf bytes {
              type uint64;
              description
                "Number of bytes discarded due to buffer unavailability";
            }
          }
        }
      }
    }
    container egress {
      description
        "Egress counters";
      container traffic {
        description
          "Egress traffic counters";
        container l2 {
          description
            "Layer 2 egress traffic counters";
          leaf frames {
            type uint64;
            description
              "Number of L2 frames";
          }
          leaf bytes {
            type uint64;
            description
              "Number of L2 bytes";
          }
        }
        container l3 {
          description
            "Layer 3 egress traffic counters";
          container v4 {
            description
              "IPv4 egress traffic counters";
            uses ip;
          }
          container v6 {
            description
              "IPv6 egress traffic counters";
            uses ip;
          }
        }
        container qos {
          description
            "Quality of Service (QoS) egress traffic counters";
          list class {
            key "id";
            min-elements 1;
            description
              "QoS class egress traffic counters";
            leaf id {
              type string;
              description
                "QoS class identifier";
            }
            leaf packets {
              type uint64;
              description
                "Number of packets in the QoS class";
            }
            leaf bytes {
              type uint64;
              description
                "Number of bytes in the QoS class";
            }
          }
        }
      }
      container discards {
        description
          "Egress packet discard counters";
        container l2 {
          description
            "Layer 2 egress packet discard counters";
          leaf frames {
            type uint64;
            description
              "Number of discarded L2 frames";
          }
          leaf bytes {
            type uint64;
            description
              "Number of discarded L2 bytes";
          }
        }
        container l3 {
          description
            "Layer 3 egress packet discard counters";
          container v4 {
            description
              "IPv4 egress packet discard counters";
            uses ip;
          }
          container v6 {
            description
              "IPv6 egress packet discard counters";
            uses ip;
          }
        }
        container errors {
          description
            "Egress packet error counters";
          container l2 {
            description
              "Layer 2 egress packet error counters";
            container tx {
              description
                "Layer 2 egress packet transmit error counters";
              leaf frames {
                type uint48;
                description
                  "Number of errored L2 frames during transmission";
              }
            }
          }
          container l3 {
            description
              "Layer 3 egress packet error counters";
            container tx {
              description
                "Layer 3 egress packet transmit error counters";
              leaf packets {
                type uint48;
                description
                  "Number of errored L3 packets during transmission";
              }
            }
          }
        }
        container policy {
          description
            "Policy-related egress packet discard counters";
          container l3 {
            description
              "Layer 3 policy egress packet discard counters";
            leaf acl {
              type uint48;
              description
                "Number of packets discarded due to L3 egress ACL";
            }
            container policer {
              description
                "Policer egress packet discard counters";
              leaf packets {
                type uint48;
                description
                  "Number of packets discarded by the egress policer";
              }
              leaf bytes {
                type uint48;
                description
                  "Number of bytes discarded by the egress policer";
              }
            }
          }
        }
        container no-buffer {
          description
            "Egress packet discard counters due to buffer unavailability";
          list class {
            key "id";
            min-elements 1;
            description
              "Per-QoS class egress packet discard counters due to buffer unavailability";
            leaf id {
              type string;
              description
                "QoS class identifier";
            }
            leaf packets {
              type uint64;
              description
                "Number of packets discarded due to buffer unavailability";
            }
            leaf bytes {
              type uint64;
              description
                "Number of bytes discarded due to buffer unavailability";
            }
          }
        }
      }
    }
    container control-plane {
      description
        "Control plane packet loss counters";
      container ingress {
        description
          "Control plane ingress packet loss counters";
        container traffic {
          description
            "Control plane ingress traffic counters";
          leaf packets {
            type uint48;
            description
              "Number of control plane packets";
          }
          leaf bytes {
            type uint48;
            description
              "Number of control plane bytes";
          }
        }
        container discards {
          description
            "Control plane ingress packet discard counters";
          leaf packets {
            type uint48;
            description
              "Number of discarded control plane packets";
          }
          leaf bytes {
            type uint48;
            description
              "Number of discarded control plane bytes";
          }
          container policy {
            description
              "Control plane policy discard counters";
            leaf packets {
              type uint48;
              description
                "Number of control plane packets discarded due to policy";
            }          

          }
        }
      }
    }
  }
  
  
  /*
   * Main Structure
   */
  container packet-discard-reporting {
    description
      "Container for packet discard reporting data.";

    list interface {
      key "name";
      description
        "List of interfaces for which packet discard reporting data is provided.";

      leaf name {
        type string;
        description
          "Name of the interface.";
      }

      uses interface;
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="security"><name>Security Considerations</name>
<t>There are no new security considerations introduced by this document.</t>

</section>
<section anchor="iana"><name>IANA Considerations</name>
<t>There are no new IANA considerations introduced by this document.</t>

</section>
<section anchor="contributors"><name>Contributors</name>

<figure><artwork><![CDATA[
Nadav Chachmon
Cisco Systems, Inc.
170 West Tasman Dr.
San Jose, CA 95134
United States of America
Email: nchachmo@cisco.com
]]></artwork></figure>

</section>
<section anchor="acknowledgements"><name>Acknowledgments</name>
<t>The content of this draft has benefitted from feedback from JR Rivers, Ronan Waide, Chris DeBruin, and Marcoz Sanz.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8791'>
  <front>
    <title>YANG Data Structure Extensions</title>
    <author fullname='A. Bierman' initials='A.' surname='Bierman'/>
    <author fullname='M. BjÃ¶rklund' initials='M.' surname='BjÃ¶rklund'/>
    <author fullname='K. Watsen' initials='K.' surname='Watsen'/>
    <date month='June' year='2020'/>
    <abstract>
      <t>This document describes YANG mechanisms for defining abstract data structures with YANG.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8791'/>
  <seriesInfo name='DOI' value='10.17487/RFC8791'/>
</reference>

<reference anchor='RFC8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor='RFC1213'>
  <front>
    <title>Management Information Base for Network Management of TCP/IP-based internets: MIB-II</title>
    <author fullname='K. McCloghrie' initials='K.' surname='McCloghrie'/>
    <author fullname='M. Rose' initials='M.' surname='Rose'/>
    <date month='March' year='1991'/>
    <abstract>
      <t>This memo defines the second version of the Management Information Base (MIB-II) for use with network management protocols in TCP/IP-based internets. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='17'/>
  <seriesInfo name='RFC' value='1213'/>
  <seriesInfo name='DOI' value='10.17487/RFC1213'/>
</reference>

<reference anchor='RFC1157'>
  <front>
    <title>Simple Network Management Protocol (SNMP)</title>
    <author fullname='J.D. Case' initials='J.D.' surname='Case'/>
    <author fullname='M. Fedor' initials='M.' surname='Fedor'/>
    <author fullname='M.L. Schoffstall' initials='M.L.' surname='Schoffstall'/>
    <author fullname='J. Davin' initials='J.' surname='Davin'/>
    <date month='May' year='1990'/>
    <abstract>
      <t>This RFC is a re-release of RFC 1098, with a changed "Status of this Memo" section plus a few minor typographical corrections. This memo defines a simple protocol by which management information for a network element may be inspected or altered by logically remote users. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='1157'/>
  <seriesInfo name='DOI' value='10.17487/RFC1157'/>
</reference>

<reference anchor='RFC3444'>
  <front>
    <title>On the Difference between Information Models and Data Models</title>
    <author fullname='A. Pras' initials='A.' surname='Pras'/>
    <author fullname='J. Schoenwaelder' initials='J.' surname='Schoenwaelder'/>
    <date month='January' year='2003'/>
    <abstract>
      <t>There has been ongoing confusion about the differences between Information Models and Data Models for defining managed objects in network management. This document explains the differences between these terms by analyzing how existing network management model specifications (from the IETF and other bodies such as the International Telecommunication Union (ITU) or the Distributed Management Task Force (DMTF)) fit into the universe of Information Models and Data Models. This memo documents the main results of the 8th workshop of the Network Management Research Group (NMRG) of the Internet Research Task Force (IRTF) hosted by the University of Texas at Austin. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='3444'/>
  <seriesInfo name='DOI' value='10.17487/RFC3444'/>
</reference>

<reference anchor='RFC5153'>
  <front>
    <title>IP Flow Information Export (IPFIX) Implementation Guidelines</title>
    <author fullname='E. Boschi' initials='E.' surname='Boschi'/>
    <author fullname='L. Mark' initials='L.' surname='Mark'/>
    <author fullname='J. Quittek' initials='J.' surname='Quittek'/>
    <author fullname='M. Stiemerling' initials='M.' surname='Stiemerling'/>
    <author fullname='P. Aitken' initials='P.' surname='Aitken'/>
    <date month='April' year='2008'/>
    <abstract>
      <t>The IP Flow Information Export (IPFIX) protocol defines how IP Flow information can be exported from routers, measurement probes, or other devices. This document provides guidelines for the implementation and use of the IPFIX protocol. Several sets of guidelines address Template management, transport-specific issues, implementation of Exporting and Collecting Processes, and IPFIX implementation on middleboxes (such as firewalls, network address translators, tunnel endpoints, packet classifiers, etc.). This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='5153'/>
  <seriesInfo name='DOI' value='10.17487/RFC5153'/>
</reference>

<reference anchor='RFC6241'>
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname='R. Enns' initials='R.' role='editor' surname='Enns'/>
    <author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'/>
    <author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'/>
    <author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'/>
    <date month='June' year='2011'/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='6241'/>
  <seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>

<reference anchor='RFC7950'>
  <front>
    <title>The YANG 1.1 Data Modeling Language</title>
    <author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'/>
    <date month='August' year='2016'/>
    <abstract>
      <t>YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols. This document describes the syntax and semantics of version 1.1 of the YANG language. YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification. There are a small number of backward incompatibilities from YANG version 1. This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7950'/>
  <seriesInfo name='DOI' value='10.17487/RFC7950'/>
</reference>


<reference anchor="RED93" >
  <front>
    <title>Random Early Detection gateways for Congestion Avoidance</title>
    <author initials="V." surname="Jacobson">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


<reference anchor='RFC2475'>
  <front>
    <title>An Architecture for Differentiated Services</title>
    <author fullname='S. Blake' initials='S.' surname='Blake'/>
    <author fullname='D. Black' initials='D.' surname='Black'/>
    <author fullname='M. Carlson' initials='M.' surname='Carlson'/>
    <author fullname='E. Davies' initials='E.' surname='Davies'/>
    <author fullname='Z. Wang' initials='Z.' surname='Wang'/>
    <author fullname='W. Weiss' initials='W.' surname='Weiss'/>
    <date month='December' year='1998'/>
    <abstract>
      <t>This document defines an architecture for implementing scalable service differentiation in the Internet. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='2475'/>
  <seriesInfo name='DOI' value='10.17487/RFC2475'/>
</reference>

<reference anchor='RFC8289'>
  <front>
    <title>Controlled Delay Active Queue Management</title>
    <author fullname='K. Nichols' initials='K.' surname='Nichols'/>
    <author fullname='V. Jacobson' initials='V.' surname='Jacobson'/>
    <author fullname='A. McGregor' initials='A.' role='editor' surname='McGregor'/>
    <author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'/>
    <date month='January' year='2018'/>
    <abstract>
      <t>This document describes CoDel (Controlled Delay) -- a general framework that controls bufferbloat-generated excess delay in modern networking environments. CoDel consists of an estimator, a setpoint, and a control loop. It requires no configuration in normal Internet deployments.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='8289'/>
  <seriesInfo name='DOI' value='10.17487/RFC8289'/>
</reference>

<reference anchor='RFC7270'>
  <front>
    <title>Cisco-Specific Information Elements Reused in IP Flow Information Export (IPFIX)</title>
    <author fullname='A. Yourtchenko' initials='A.' surname='Yourtchenko'/>
    <author fullname='P. Aitken' initials='P.' surname='Aitken'/>
    <author fullname='B. Claise' initials='B.' surname='Claise'/>
    <date month='June' year='2014'/>
    <abstract>
      <t>This document describes some additional IP Flow Information Export (IPFIX) Information Elements in the range of 1-127, which is the range compatible with field types used by NetFlow version 9 in RFC 3954, as specified in the IPFIX Information Model in RFC 7012.</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='7270'/>
  <seriesInfo name='DOI' value='10.17487/RFC7270'/>
</reference>




    </references>


<section anchor="where-do-packets-get-dropped"><name>Where do packets get dropped?</name>
<t><xref target="ex-drop"/> depicts an example of where and why packets may be discarded in a typical single ASIC, shared buffered type device, where packets ingress on the left and egress on the right.</t>

<figure title="Example of where packets get dropped" anchor="ex-drop"><artwork><![CDATA[
                                                      +----------+
                                                      |          |
                                                      |  CPU     |
                                                      |          |
                                                      +--+---^---+
                                                from_cpu |   | to_cpu
                                                         |   |
                          +------------------------------v---+-------------------------------+
                          |                                                                  |

            +----------+  +----------+  +----------+  +----------+  +----------+  +----------+  +----------+
            |          |  |          |  |          |  |          |  |          |  |          |  |          |
 Packet rx ->  Phy     +-->  Mac     +--> Ingress  +--> Buffers  +--> Egresss  +-->  Mac     +-->  Phy     |>  Packet tx
            |          |  |          |  |  Pipeline|  |          |  |  Pipeline|  |          |  |          |
            +----------+  +----------+  +----------+  +----------+  +----------+  +----------+  +----------+

  Intended                               policy/acl                  policy/acl
  Discards:                              policy/policer              policy/policer
                                         policy/urpf
                                         policy/null_route

Unintended                 error/rx/l2   error/l3/rx   no_buffer     error/l3/tx
  Discards:                              error/local
                                         error/l3/no_route
                                         error/l3/rx/ttl_expired

]]></artwork></figure>

<section anchor="class_descriptions"><name>Discard Class Descriptions</name>

<dl>
  <dt>discards/policy/:</dt>
  <dd>
    <t>These are intended discards, meaning packets dropped by a device due to a configured policy. There are multiple sub-classes.</t>
  </dd>
  <dt>discards/error/l2/rx/:</dt>
  <dd>
    <t>Frames discarded due to errors in the received L2 frame. There are multiple sub-classes, such as those resulting from failing CRC, invalid header, invalid MAC address, or invalid VLAN.</t>
  </dd>
  <dt>discards/error/l3/rx/:</dt>
  <dd>
    <t>These are discards which occur due to errors in the received packet, indicating an upstream problem rather than an issue with the device dropping the errored packets. There are multiple sub-classes, including header checksum errors, MTU exceeded, and invalid packet, i.e. due to incorrect version, incorrect header length, or invalid options.</t>
  </dd>
  <dt>discards/error/l3/rx/ttl_expired:</dt>
  <dd>
    <t>There can be multiple causes for TTL-expired (or Hop limit exceeded) discards: i) trace-route; ii) TTL (Hop limit) set too low by the end-system; iii) routing loops.</t>
  </dd>
  <dt>discards/error/l3/no_route/:</dt>
  <dd>
    <t>Discards occur due to a packet not matching any route.</t>
  </dd>
  <dt>discards/error/local/:</dt>
  <dd>
    <t>A device may discard packets within its switching pipeline due to internal errors, such as parity errors. Any errored discards not explicitly assigned to the above classes are also accounted for here.</t>
  </dd>
  <dt>discards/no_buffer/:</dt>
  <dd>
    <t>Discards occur due to no available buffer to enqueue the packet. These can be tail-drop discards or due to an active queue management algorithm, such as RED <xref target="RED93"/> or CODEL <xref target="RFC8289"/>.</t>
  </dd>
</dl>

</section>
</section>
<section anchor="experience"><name>Implementation Experience</name>
<t>This appendix captures the authors' experience gained from implementing and applying this information model across multiple vendors' platforms, as guidance for future implementers.</t>

<t><list style="numbers">
  <t>The number and granularity of classes described in Section 3 represent a compromise.  It aims to offer sufficient detail to enable appropriate automated actions while avoiding excessive detail, which may hinder quick problem identification.  Additionally, it helps constrain the quantity of data produced per interface to constrain data volume and device CPU impacts.  Although further granularity is possible, the scheme described has generally proven to be sufficient for the task of auto-mitigating unintended packet loss.</t>
  <t>There are multiple possible ways to define the discard classification tree.  For example, we could have used a multi-rooted tree, rooted in each protocol.  Instead, we opted to define a tree where protocol discards and causal discards are accounted for orthogonally.  This decision reduces the number of combinations of classes and has proven sufficient for determining mitigation actions.</t>
  <t>NoBuffer discards can be realized differently with different memory architectures. Whether a NoBuffer discard is attributed to ingress or egress can differ accordingly.  For successful auto-mitigation, discards due to egress interface congestion should be reported on egress, while discards due to device-level congestion (e.g. due to exceeding the device forwarding rate) should be reported on ingress.</t>
  <t>Platforms often account for the number of packets discarded where the TTL has expired (or Hop Limit exceeded), and the device CPU has returned an ICMP Time Exceeded message.  There is typically a policer applied to limit the number of packets sent to the device CPU, however, which implicitly limits the rate of TTL discards that are processed.  One method to account for all packet discards due to TTL expired, even those that are dropped by a policer when being forwarded to the CPU, is to use accounting of all ingress packets received with TTL=1.</t>
  <t>Where no route discards are implemented with a default null route, separate discard accounting is required for any explicit null routes configured, in order to differentiate between interface/ingress/discards/policy/null_route/packets and interface/ingress/discards/errors/no_route/packets.</t>
  <t>It is useful to account separately for transit packets discarded by transit ACLs or policers, and packets discarded by ACLs or policers which limit the number of packets to the device control plane.</t>
  <t>It is not possible to identify a configuration error - e.g., when intended discards are unintended - with device packet loss metrics alone.  For example, to determine if ACL drops are intended or due to a misconfigured ACL some other method is needed, i.e., with configuration validation before deployment or by detecting a significant change in ACL drops after a configuration change compared to before.</t>
  <t>Where traffic byte counters need to be 64-bit, packet and discard counters that increase at a lower rate may be encoded in fewer bits, e.g., 48-bit.</t>
  <t>Aggregate counters need to be able to deal with the possibility of discontinuities in the underlying counters.</t>
  <t>In cases where the reporting device is the source or destination of a tunnel, the ingress protocol for a packet may differ from the egress protocol; if IPv4 is tunneled over IPv6 for example.  Some implementations may attribute egress discards to the ingress protocol.</t>
  <t>While the classification tree is seven layers deep, a minimal implementation may only implement the top six layers.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
1afmPQfh4NdTGBUyEBh2/X+46/yfr7cAAA==

-->

</rfc>

